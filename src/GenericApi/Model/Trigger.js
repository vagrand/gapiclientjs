/**
 * Generic API
 * Стандартизованное API коннектора, предназначенного для интеграции с внешним источником данных. Общая спецификация [тут](https://co-ms.atlassian.net/wiki/spaces/NC/pages/85852315/Generic+API)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Trigger model module.
 * @module GenericApi/Model/Trigger
 * @version 1.0.0
 */
class Trigger {
    /**
     * Constructs a new <code>Trigger</code>.
     * @alias module:GenericApi/Model/Trigger
     * @param id {Number} 
     * @param objectId {Number} 
     * @param metricId {Number} 
     * @param description {String} Человекопонятное описание триггера, например: “Критическая нагрузка на хосте {HOST.NAME}“, где {HOST.NAME}, при срабатывании, заменяется на имя объекта
     * @param expression {String} Выражение триггера, применяется для определения возникновения события
     * @param priority {Number} Важность триггера, чем больше значение, тем важнее
     * @param status {Number} Статус триггера: 1 - активный, 0 - неактивный
     */
    constructor(id, objectId, metricId, description, expression, priority, status) { 
        
        Trigger.initialize(this, id, objectId, metricId, description, expression, priority, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, objectId, metricId, description, expression, priority, status) { 
        obj['id'] = id;
        obj['object_id'] = objectId;
        obj['metric_id'] = metricId;
        obj['description'] = description;
        obj['expression'] = expression;
        obj['priority'] = priority;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>Trigger</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:GenericApi/Model/Trigger} obj Optional instance to populate.
     * @return {module:GenericApi/Model/Trigger} The populated <code>Trigger</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Trigger();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('object_id')) {
                obj['object_id'] = ApiClient.convertToType(data['object_id'], 'Number');
            }
            if (data.hasOwnProperty('metric_id')) {
                obj['metric_id'] = ApiClient.convertToType(data['metric_id'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('expression')) {
                obj['expression'] = ApiClient.convertToType(data['expression'], 'String');
            }
            if (data.hasOwnProperty('recovery_expression')) {
                obj['recovery_expression'] = ApiClient.convertToType(data['recovery_expression'], 'String');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} id
 */
Trigger.prototype['id'] = undefined;

/**
 * @member {Number} object_id
 */
Trigger.prototype['object_id'] = undefined;

/**
 * @member {Number} metric_id
 */
Trigger.prototype['metric_id'] = undefined;

/**
 * Человекопонятное описание триггера, например: “Критическая нагрузка на хосте {HOST.NAME}“, где {HOST.NAME}, при срабатывании, заменяется на имя объекта
 * @member {String} description
 */
Trigger.prototype['description'] = undefined;

/**
 * Выражение триггера, применяется для определения возникновения события
 * @member {String} expression
 */
Trigger.prototype['expression'] = undefined;

/**
 * Выражения восстановления, применяется для определения прекращения события
 * @member {String} recovery_expression
 */
Trigger.prototype['recovery_expression'] = undefined;

/**
 * Важность триггера, чем больше значение, тем важнее
 * @member {Number} priority
 */
Trigger.prototype['priority'] = undefined;

/**
 * Статус триггера: 1 - активный, 0 - неактивный
 * @member {Number} status
 */
Trigger.prototype['status'] = undefined;






export default Trigger;

